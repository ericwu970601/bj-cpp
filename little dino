#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>
#include <iostream>

const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 400;
const int GROUND_HEIGHT = 300;
const float GRAVITY = 0.5f;
const float JUMP_SPEED = -10.0f;
const float OBSTACLE_SPEED = 5.0f;

class Dino {
public:
    sf::RectangleShape shape;
    float velocityY;
    bool isJumping;

    Dino() {
        shape.setSize(sf::Vector2f(40, 40));
        shape.setFillColor(sf::Color::Green);
        shape.setPosition(100, GROUND_HEIGHT);
        velocityY = 0;
        isJumping = false;
    }

    void jump() {
        if (!isJumping) {
            velocityY = JUMP_SPEED;
            isJumping = true;
        }
    }

    void update() {
        velocityY += GRAVITY;
        shape.move(0, velocityY);

        if (shape.getPosition().y >= GROUND_HEIGHT) {
            shape.setPosition(shape.getPosition().x, GROUND_HEIGHT);
            velocityY = 0;
            isJumping = false;
        }
    }
};

class Obstacle {
public:
    sf::RectangleShape shape;

    Obstacle(float x) {
        shape.setSize(sf::Vector2f(20, 40));
        shape.setFillColor(sf::Color::Red);
        shape.setPosition(x, GROUND_HEIGHT);
    }

    void update() {
        shape.move(-OBSTACLE_SPEED, 0);
    }
};

int main() {
    sf::RenderWindow window(sf::VideoMode(WINDOW_WIDTH, WINDOW_HEIGHT), "Little Dino Game");
    Dino dino;
    Obstacle obstacle(WINDOW_WIDTH);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Space)
                dino.jump();
        }

        dino.update();
        obstacle.update();

        if (obstacle.shape.getPosition().x + obstacle.shape.getSize().x < 0) {
            obstacle.shape.setPosition(WINDOW_WIDTH, GROUND_HEIGHT);
        }

        window.clear(sf::Color::White);
        window.draw(dino.shape);
        window.draw(obstacle.shape);
        window.display();
    }

    return 0;
}
